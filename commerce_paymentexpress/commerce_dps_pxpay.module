<?php

/**
 * @file
 * Integrates the DPS PxPay gateway with Drupal Commerce!
 */


/*******************************************************************************
 * Hook Functions (Drupal)
 ******************************************************************************/

/**
 * Implementation of hook_perm().
 */
function commerce_dps_pxpay_permission() {
  return array(
    'administer commerce dps pxpay' => array(
      'title' => t('Administer Commerce DPS PXPay'),
      'description' => t('Perform administration tasks for Commerce DPS PXPay'),
    ));
}


/*******************************************************************************
 * Hook Functions (Drupal Commerce)
 ******************************************************************************/

function commerce_dps_pxpay_commerce_payment_method_info() {
  return array(
    'commerce_dps_pxpay' => array(
      'title' => t('Commerce Payment Express (PxPay)'),
      'short_title' => t('DPS'),
      'display_title' => t('Credit card'),
      'description' => t('Provides integration with the DPS PxPay payment gateway.'),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'offsite_autoredirect' => TRUE,
    ),
  );
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Payment method callback: settings form.
 */

function commerce_dps_pxpay_settings_form($settings = NULL) {
$form = array();

  $settings = (array) $settings + array(
    'commerce_dps_pxpay_userid' => variable_get('commerce_dps_pxpay_userid', 'Sample User'),
    'commerce_dps_pxpay_key' => variable_get('commerce_dps_pxpay_key', 'Sample Key'),
    'commerce_dps_pxpay_server' => variable_get('commerce_dps_pxpay_server', 'https://sec.paymentexpress.com/pxpay/pxaccess.aspx'),
    'commerce_dps_pxpay_currency' => variable_get('commerce_dps_pxpay_currency', 'NZD'),
    'commerce_dps_pxpay_cancel_return_url' => variable_get('commerce_dps_pxpay_cancel_return_url', 'cart'),
    'commerce_dps_pxpay_refprefix' => variable_get('commerce_dps_pxpay_refprefix', 'Website Order'),
  );  

  $form['commerce_dps_pxpay_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('PxPay User Id'),
    '#description' => t('PxPay User Id that was issued by Payment Express.'),
    '#default_value' => $settings['commerce_dps_pxpay_userid'],
    '#required' => TRUE,
  );
  $form['commerce_dps_pxpay_key'] = array(
    '#type' => 'textfield',
    '#title' => t('PxPay key'),
    '#description' => t('PxPay Key that was issued by Payment Express.'),
    '#default_value' => $settings['commerce_dps_pxpay_key'],
    '#required' => TRUE,
  );
  $form['commerce_dps_pxpay_server'] = array(
    '#type' => 'select',
    '#title' => t('PxPay server'),
    '#description' => t('Sign up for and use a Sandbox account for testing.'),
    '#options' => array(
      'https://sec.paymentexpress.com/pxpay/pxaccess.aspx' => ('Live'),
    ),
    '#default_value' => $settings['commerce_dps_pxpay_server'],
    '#required' => TRUE,
  );
  $form['commerce_dps_pxpay_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => _commerce_dps_pxpay_currency_array(),
    '#default_value' => $settings['commerce_dps_pxpay_currency'],
  );
  $form['commerce_dps_pxpay_cancel_return_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Cancel return URL'),
    '#description' => t('Specify the path customers who cancel their DPS PxPay payment will be directed to when they return to your site.'),
    '#default_value' => $settings['commerce_dps_pxpay_cancel_return_url'],
    '#size' => 32,
    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
  );
  $form['commerce_dps_pxpay_refprefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Reference Prefix'),
    '#description' => t('Added before order number sent to DPS, ie Website Order #1234'),
    '#default_value' => $settings['commerce_dps_pxpay_refprefix'],
    '#required' => TRUE,
  );
  
  return $form;
}


/**
 * Payment method callback: checkout form.
 */
function commerce_dps_pxpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['commerce_dps_pxpay_logo'] = array(
    '#markup' => l(
      theme_image(array(
        'path' => drupal_get_path('module', 'commerce_paymentexpress') . 'sites/all/modules/commerce_paymentexpress/images/dps_paymentexpress_small.png',
        'alt' => t('DPS - Payment Gateway by Payment Express.'),
        'title' => t('DPS - Payment Gateway by Payment Express.'),
        'attributes' => array('style' => 'float: left; margin: 1em 1em 1em 1.5em;'),
      )),
      'http://www.paymentexpress.com',
      array('html' => TRUE, 'attributes' => array('target' => '_blank'))
    ),
  );

  return $form;
}

/**
 * Implements hook_redirect_form().
 */
function commerce_dps_pxpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the DPS payment gateway userid and key aren't configured.
  if (empty($payment_method['settings']['commerce_dps_pxpay_userid']) || 
  empty($payment_method['settings']['commerce_dps_pxpay_key'])) {
    drupal_set_message(t('The DPS payment gateway cannot be used at this time'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_dps_pxpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

function commerce_dps_pxpay_order_form($form, &$form_state, $order, $settings) {
  
  include('PxPay_Curl.inc');
  
  $wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Ensure a default value for the payment_method setting.
  $settings += array('payment_method' => '');
  
  $PxPay_Url    = "https://sec.paymentexpress.com/pxpay/pxaccess.aspx";
  $PxPay_Userid = "CodeWorkshop_dev"; #Important! Update with your UserId
  $PxPay_Key    =  "4ae5c31e9bce5749ca489c2b6b591564932f072416ad5070be7cd163fa4f599c"; #Important! Update with your Key
  
  $pxpay = new PxPay_Curl( $PxPay_Url, $PxPay_Userid, $PxPay_Key );
  
  // $pxpay = new PxPay_Curl(
  //   variable_get('commerce_dps_pxpay_server', 'https://sec.paymentexpress.com/pxpay/pxaccess.aspx'),
  //   variable_get('commerce_dps_pxpay_userid', ''),
  //   variable_get('commerce_dps_pxpay_key', '')
  // );
  
  $request = new PxPayRequest();

  # the following variables are read from the form
  $merchant_reference = "Website Order #". $order->order_number;
  $amount = $wrapper->commerce_order_total->amount->value();
  #Generate a unique identifier for the transaction
  $txn_id = uniqid($order->order_number);
  // $order->data['pxpay_txnid'] = $txn_id;

  $failure_url = $settings['cancel_return'];
  $success_url = $settings['return'];

  // Load customer profiles.
  $profile1 = commerce_customer_profile_load($order->commerce_customer_billing[LANGUAGE_NONE][0]['profile_id']);
  // $profile2 = commerce_customer_profile_load($order->commerce_customer_delivery[LANGUAGE_NONE][0]['profile_id']);

  // Get user billing name.
  // $data1 = $profile->commerce_customer_name[LANGUAGE_NONE][0];
  $data1 = 'Test Data 1';

  // Get user billing address.
  $data2 = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  
  // Get user delivery address.
  // $data2 = $profile->commerce_customer_address[LANGUAGE_NONE][0];
  $data3 = 'Test Data 3';

  // Set PxPay properties
  $request->setMerchantReference($merchant_reference);
  $request->setAmountInput($amount);
  $request->setTxnData1($data1);
  $request->setTxnData2($data2);
  $request->setTxnData3($data3);
  $request->setTxnType("Purchase");
  $request->setCurrencyInput(variable_get('commerce_dps_pxpay_currency', 'NZD'));
  $request->setEmailAddress($order->mail);
  $request->setUrlFail($failure_url);  # can be a dedicated failure page
  $request->setUrlSuccess($success_url);  # can be a dedicated success page
  $request->setTxnId($txn_id);

  // Call makeRequest function to obtain input XML
  $request_string = $pxpay->makeRequest($request);

  // Obtain output XML
  $response = new MifMessage($request_string);

  // Parse output XML
  $url = $response->get_element_text("URI");
  $valid = $response->get_attribute("valid");

  $form['#action'] = $url;

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Proceed to DPS'),
  );

  return $form;
}

/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

// Returns an array of possible currency codes.
function _commerce_dps_pxpay_currency_array() {
  //return drupal_map_assoc(array('AUD', 'CAD', 'CHF', 'EUR', 'GBP', 'HKD', 'JPY', 'MXN', 'NOK', 'NZD', 'PLN', 'SEK', 'SGD', 'USD'));
  return array(
    'CAD' => 'Canadian Dollar',
    'CHF' => 'Swiss Franc',
    'EUR' => 'Euro',
    'FRF' => 'French Franc',
    'GBP' => 'United Kingdom Pound',
    'HKD' => 'Hong Kong Dollar',
    'JPY' => 'Japanese Yen',
    'NZD' => 'New Zealand Dollar',
    'SGD' => 'Singapore Dollar',
    'USD' => 'United States Dollar',
    'ZAR' => 'Rand',
    'AUD' => 'Australian Dollar',
    'WST' => 'Samoan Tala',
    'VUV' => 'Vanuatu Vatu',
    'TOP' => 'Tongan Pa\'anga',
    'SBD' => 'Solomon Islands Dollar',
    'PNG' => 'Papua New Guinea Kina',
    'MYR' => 'Malaysian Ringgit',
    'KWD' => 'Kuwaiti Dinar',
    'FJD' => 'Fiji Dollar',
  );
}