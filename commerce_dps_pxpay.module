<?php

/**
 * @file
 * Integrates the DPS PxPay gateway with Drupal Commerce!
 */

/*******************************************************************************
 * DPS Definitions
 ******************************************************************************/
define('COMMERCE_DPS_PXPAY_USERID', 'Sample User');
define('COMMERCE_DPS_PXPAY_KEY', 'Sample Key');
define('COMMERCE_DPS_PXPAY_SERVER', 'https://sec.paymentexpress.com/pxpay/pxaccess.aspx');
define('COMMERCE_DPS_PXPAY_CURRENCY', 'NZD');
define('COMMERCE_DPS_PXPAY_CANCEL_RETURN_URL', 'cart');
define('COMMERCE_DPS_PXPAY_REFPREFIX', 'Website Order');

/*******************************************************************************
 * Hook Functions (Drupal Commerce)
 ******************************************************************************/

function commerce_dps_pxpay_commerce_payment_method_info() {
  return array(
    'commerce_dps_pxpay' => array(
      'title' => t('Commerce Payment Express (PxPay)'),
      'short_title' => t('DPS'),
      'display_title' => t('Credit card'),
      'description' => t('Provides integration with the DPS PxPay payment gateway.'),
      'terminal' => FALSE,
      'offsite' => TRUE,
      'active' => TRUE,
    ),
  );
}


/*******************************************************************************
 * Callback Functions, Forms, and Tables
 ******************************************************************************/

/**
 * Payment method callback: settings form.
 */
function commerce_dps_pxpay_settings_form($settings = NULL) {
  $form = array();

  $settings = (array) $settings + array(
    'commerce_dps_pxpay_userid' => COMMERCE_DPS_PXPAY_USERID,
    'commerce_dps_pxpay_key' => COMMERCE_DPS_PXPAY_KEY,
    'commerce_dps_pxpay_server' => COMMERCE_DPS_PXPAY_SERVER,
    'commerce_dps_pxpay_currency' => COMMERCE_DPS_PXPAY_CURRENCY,
    'commerce_dps_pxpay_cancel_return_url' => COMMERCE_DPS_PXPAY_CANCEL_RETURN_URL,
    'commerce_dps_pxpay_refprefix' => COMMERCE_DPS_PXPAY_REFPREFIX
  );

  $form['commerce_dps_pxpay_userid'] = array(
    '#type' => 'textfield',
    '#title' => t('PxPay User Id'),
    '#description' => t('PxPay User Id that was issued by Payment Express.'),
    '#default_value' => $settings['commerce_dps_pxpay_userid'],
    '#required' => TRUE,
  );

  $form['commerce_dps_pxpay_key'] = array(
    '#type' => 'textfield',
    '#title' => t('PxPay key'),
    '#description' => t('PxPay Key that was issued by Payment Express.'),
    '#default_value' => $settings['commerce_dps_pxpay_key'],
    '#required' => TRUE,
  );
  $form['commerce_dps_pxpay_server'] = array(
    '#type' => 'select',
    '#title' => t('PxPay server'),
    '#description' => t('Sign up for and use a Sandbox account for testing.'),
    '#options' => array(
      'https://sec.paymentexpress.com/pxpay/pxaccess.aspx' => ('Live'),
    ),
    '#default_value' => $settings['commerce_dps_pxpay_server'],
    '#required' => TRUE,
  );
  $form['commerce_dps_pxpay_currency'] = array(
    '#type' => 'select',
    '#title' => t('Currency code'),
    '#description' => t('Transactions can only be processed in one of the listed currencies.'),
    '#options' => _commerce_dps_pxpay_currency_array(),
    '#default_value' => $settings['commerce_dps_pxpay_currency'],
  );
  $form['commerce_dps_pxpay_cancel_return_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Cancel return URL'),
    '#description' => t('Specify the path customers who cancel their DPS PxPay payment will be directed to when they return to your site.'),
    '#default_value' => $settings['commerce_dps_pxpay_cancel_return_url'],
    '#size' => 32,
    '#field_prefix' => url(NULL, array('absolute' => TRUE)) . (variable_get('clean_url', 0) ? '' : '?q='),
  );
  $form['commerce_dps_pxpay_refprefix'] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant Reference Prefix'),
    '#description' => t('Added before order number sent to DPS, ie Website Order #1234'),
    '#default_value' => $settings['commerce_dps_pxpay_refprefix'],
    '#required' => TRUE,
  );

  return $form;
}


/**
 * Payment method callback: checkout form.
 */
function commerce_dps_pxpay_submit_form($payment_method, $pane_values, $checkout_pane, $order) {
  $form['commerce_dps_pxpay_logo'] = array(
    '#markup' => l(
      theme_image(array(
        'path' => drupal_get_path('module', 'commerce_paymentexpress') . '/images/dps_paymentexpress_small.png',
        'alt' => t('DPS - Payment Gateway by Payment Express.'),
        'title' => t('DPS - Payment Gateway by Payment Express.'),
        'attributes' => array('style' => 'float: left; margin: 1em 1em 1em 1.5em;'),
      )),
      'http://www.paymentexpress.com',
      array('html' => TRUE, 'attributes' => array('target' => '_blank'))
    ),
  );

  return $form;
}

/**
 * Implements hook_redirect_form().
 */
function commerce_dps_pxpay_redirect_form($form, &$form_state, $order, $payment_method) {
  // Return an error if the DPS payment gateway userid and key aren't configured.
  if (empty($payment_method['settings']['commerce_dps_pxpay_userid']) ||
  empty($payment_method['settings']['commerce_dps_pxpay_key'])) {
    drupal_set_message(t('The DPS payment gateway cannot be used at this time'), 'error');
    return array();
  }

  $settings = array(
    // Return to the previous page when payment is canceled
    'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Return to the payment redirect page for processing successful payments
    'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array('absolute' => TRUE)),

    // Specify the current payment method instance ID in the notify_url
    'payment_method' => $payment_method['instance_id'],
  );

  return commerce_dps_pxpay_order_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

function commerce_dps_pxpay_order_form($form, &$form_state, $order, $settings) {
  module_load_include('inc', 'commerce_dps_pxpay', 'commerce_dps_pxpay');

  $transaction = array(
    'user_id'     => $settings['commerce_dps_pxpay_userid'],
    'server'      => $settings['commerce_dps_pxpay_server'],
    'key'         => $settings['commerce_dps_pxpay_key'],
    'amount'      => $order->commerce_order_total['und'][0]['amount'] / 100,
    'type'        => 'Purchase',
    'txn_id'      => uniqid($order->order_number),
    'reference'   => $settings['commerce_dps_pxpay_refprefix'] ." #". $order->order_number,
    'currency'    => 'NZD',
    'url_success' => $settings['return'],
    'url_failure' => $settings['cancel_return'],
    'email'       => $order->mail,
    'log'         => TRUE,
  );

  if ($url = commerce_dps_pxpay_generate_request($transaction)) {
    drupal_goto($url);
  }
  else {
    watchdog('commerce_dps_pxpay', 'Unable to generate DPS request with settings: @settings', array('@settings' => print_r($settings,1)), WATCHDOG_DEBUG);
  }
}

/**
 * Implements hook_redirect_form_validate
 *
 * // had "$payment_method['settings'] + $settings" as second param?
 */
function commerce_dps_pxpay_redirect_form_validate($order, $method){
  $settings = $method['settings'];

  include('PxPay_Curl.inc');

  $pxpay = new PxPay_Curl(
    $settings['commerce_dps_pxpay_server'],
    $settings['commerce_dps_pxpay_userid'],
    $settings['commerce_dps_pxpay_key']
  );

  $enc_hex = $_GET["result"];
  // getResponse method in PxPay object returns PxPayResponse object
  // which encapsulates all the response data
  $rsp = $pxpay->getResponse($enc_hex);

  if ($rsp->getSuccess() == "1") {
    // the following are the fields available in the PxPayResponse object
    $tokens->data['payment_details']['pxpay_Success'] = $rsp->getSuccess();   # =1 when request succeeds
    $tokens->data['payment_details']['pxpay_AmountSettlement']  = $rsp->getAmountSettlement();
    $tokens->data['payment_details']['pxpay_AuthCode'] = $rsp->getAuthCode();  # from bank
    $tokens->data['payment_details']['pxpay_CardName'] = $rsp->getCardName();  # eg "Visa"
    $tokens->data['payment_details']['pxpay_CardNumber'] = $rsp->getCardNumber(); # Truncated card number
    $tokens->data['payment_details']['pxpay_CardHolderName'] = $rsp->getCardHolderName();

    $tokens->data['payment_details']['pxpay_DateExpiry'] = $rsp->getDateExpiry();
    $txn_id = $tokens->data['payment_details']['pxpay_DpsTxnRef'] = $rsp->getDpsTxnRef();
    $tokens->data['payment_details']['pxpay_TxnType'] = $rsp->getTxnType();
    $tokens->data['payment_details']['pxpay_ClientInfo'] = $rsp->getClientInfo(); # The IP address of the user who submitted the transaction
    $tokens->data['payment_details']['pxpay_TxnId'] = $rsp->getTxnId();
    $tokens->data['payment_details']['pxpay_EmailAddress'] = $rsp->getEmailAddress();
    $tokens->data['payment_details']['pxpay_MerchantReference'] = $rsp->getMerchantReference();
    $tokens->data['payment_details']['pxpay_ResponseText'] = $rsp->getResponseText();

    $merchant_reference = $settings['commerce_dps_pxpay_refprefix'] ." #". $order->order_number;

    // removed redundant check
    // $tokens->data['payment_details']['pxpay_TxnId'] != $rsp->getTxnId()
    // value is set @ line 287
    // prob meant to check sth else
    if ($merchant_reference != $rsp->getMerchantReference() ||
        $rsp->getEmailAddress() != $order->mail) {
      watchdog('commerce_dps_pxpay', 'DPS PxPay details do not match order details! Cart order ID: @cart_order', array('@cart_order' => $order->order->order_number), WATCHDOG_NOTICE);

      drupal_set_message(t('The details of your DPS PxPay payment do not match your order. Please contact us for assistance. Reference Order Id: @orderid', array('@orderid' => $order->order_number)));
      drupal_goto($settings['commerce_dps_pxpay_cancel_return_url']);
      return;
    }

    commerce_dps_pxpay_form_transaction($payment_method, $order, $tokens, COMMERCE_PAYMENT_STATUS_SUCCESS);

    } else {

    commerce_dps_pxpay_form_transaction($payment_method, $order, $tokens, COMMERCE_PAYMENT_STATUS_PENDING);

  }

}



/**
 * Create a transaction and associate it with an order
 */
function commerce_dps_pxpay_form_transaction($payment_method, $order, $tokens, $transaction_status) {

  $transaction = commerce_payment_transaction_new('commerce_dps_pxpay', $order->order_id);
  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->amount = $tokens->data['payment_details']['pxpay_AmountSettlement'];
  $transaction->currency_code = $settings['commerce_dps_pxpay_currency'];
  $transaction->remote_id = $tokens->data['payment_details']['pxpay_DpsTxnRef'];

  // set a status for the payment - one of COMMERCE_PAYMENT_STATUS_SUCCESS, COMMERCE_PAYMENT_STATUS_PENDING or COMMERCE_PAYMENT_STATUS_FAILURE
  $transaction->status = $transaction_status;
  $transaction->message = 'Status @status, @statusdetail. Email: @vpstxid. Auth Code=@authcode.';
  $transaction->message_variables =
    array(
      '@status' => $tokens->data['payment_details']['pxpay_Success'],
      '@statusdetail' => $tokens->data['payment_details']['pxpay_ResponseText'],
      '@email' => $tokens->data['payment_details']['pxpay_EmailAddress'],
      '@authcode' => $tokens->data['payment_details']['pxpay_AuthCode'],
    );

  commerce_payment_transaction_save($transaction);

}


/*******************************************************************************
 * Module and Helper Functions
 ******************************************************************************/

// Returns an array of possible currency codes.
function _commerce_dps_pxpay_currency_array() {
  //return drupal_map_assoc(array('AUD', 'CAD', 'CHF', 'EUR', 'GBP', 'HKD', 'JPY', 'MXN', 'NOK', 'NZD', 'PLN', 'SEK', 'SGD', 'USD'));
  return array(
    'CAD' => 'Canadian Dollar',
    'CHF' => 'Swiss Franc',
    'EUR' => 'Euro',
    'FRF' => 'French Franc',
    'GBP' => 'United Kingdom Pound',
    'HKD' => 'Hong Kong Dollar',
    'JPY' => 'Japanese Yen',
    'NZD' => 'New Zealand Dollar',
    'SGD' => 'Singapore Dollar',
    'USD' => 'United States Dollar',
    'ZAR' => 'Rand',
    'AUD' => 'Australian Dollar',
    'WST' => 'Samoan Tala',
    'VUV' => 'Vanuatu Vatu',
    'TOP' => 'Tongan Pa\'anga',
    'SBD' => 'Solomon Islands Dollar',
    'PNG' => 'Papua New Guinea Kina',
    'MYR' => 'Malaysian Ringgit',
    'KWD' => 'Kuwaiti Dinar',
    'FJD' => 'Fiji Dollar',
  );
}
